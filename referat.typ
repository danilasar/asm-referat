#import "conf.typ" : conf
#show: conf.with(
  title: [Обратная разработка программного обеспечения],
  type: "referat",
  info: (
      author: (
        name: [Григорьева Данилы Евгеньевича],
        faculty: [КНиИТ],
        group: "251",
        sex: "male"
      ),
      inspector: (
        degree: "доцент, к. ф.-м. н.",
        name: "А. Г. Фёдорова"
      )
  ),
  settings: (
    title_page: (
      enabled: true
    ),
    contents_page: (
      enabled: true
    )
  )
)

= Введение
Обратная разработка --- метод исследования устройств или программного обеспечения с целью понять принцип его работы или обнаружить недокументированные возможности. Цели его применения могут быть самыми различными:

- Для внесения модификаций и добавления функционала в программы, исходный код которых был утерян или является недоступным
- Исследование существующих программ, закрытых протоколов и форматов для разработки альтернатив или обеспечения совместимости с ними
- Внедрение вредоносного кода, обход технических средств защиты авторских прав и другие противоправные цели
- Исследование вредоносов и составление сигнатур

При этом обратная разработка не только требует крайне высокой квалификации исследователя, но и занимает огромную массу времени. Этот процесс связан с путешествия в самые недра изучаемой программы, ведь задача реверс-инженера --- работая с низкоуровневыми данными --- двоичными кодами, машинными инструкциями --- эвристическим методом воспроизвести исходные данные, структуры и алгоритмы. С этой целью он может прибегнуть к самым различным, подчас совершенно нестандартным и полностью неожиданным, способам, среди которых можно выделить несколько основных и наиболее распространённых:
- Анализ данных. Очевидно, что наблюдая за пакетами сетевого трафика и содержимым файлов, можно восстановить их структуру. Это не только поможет научиться самостоятельно паковать данные в такой формат, но и может способствовать пониманию логики работы самой программы. Первое полезно, например, при обеспечении совместимости альтернативного ПО с исследуемым (например, разработке функций экспорта или конвертеров), второе --- при воссоздании её исходного кода.
- Динамический анализ. Пользуясь отладчиками, можно детально изучить поведение программы, содержимое регистров и оперативной памяти на каждом этапе её выполнения. Для лучшего понимания работу сложных алгоритмов нередко бывает полезно понаблюдать за ними в действии. Кроме того, поймать и локализовать некоторые ошибки также проще в процессе отладки.
- Статический анализ. При воспроизведении исходного кода необходимо тщательно разобраться во всём коде, а для этого нужно осмыслить каждую машинную инструкцию. Обратный разработчик не просто должен дизассемблировать программу и прочесть листинг, ему нужно понять логику, воспроизвести алгоритм и на писать его на более абстрактном --- высокоуровневом --- языке.
- Декомпиляция. Некоторые частные случаи позволяют полностью восстановить исходный код программы и реверс-инженер не должен упускать такую удобную и приятную, но такую редкую возможность.

Существуют и методы противодействия таким исследователям, к ним разработчики могли прибегнуть, если опасались за безопасность своего продукта или просто за "интеллектуальную собственность".

= Технологии обратной разработки
== Анализ данных
=== Перехват и анализ сетевого трафика
Перехватывая пакеты, которые отправляют программы по сети, можно установить, что за данные, в каком количестве, куда и при каких условиях отправляются. Таким образом можно, например, установить, что собирается компанией в рамках телеметрии через её продукцию или какая конкретно информация о жертве интересует крадущего чувствительные данные исследуемого вредоноса. Кроме того, установив таким образом пункт назначения отправляемых сведений, в случае их незаконного сбора, мы уже имеем след, по которому можно двигаться дальше. Соответственно, технологии перехвата и анализа сетевого трафика особенно интересны криминалистам, разведчикам и контрразведчикам, но не только они подобным занимаются. При разработке программного обеспечнеия (ПО), работающего с недокументированным протоколом, также приходится прибегать к проверенным методам познания --- наблюдению и описанию.


=== Исследование форматов файла
== Отладка

== Дизассемблирование машинного кода

== Декомпиляция машинного кода

= Методы противодействия обратной разработке
== Проверка целостности
Контрольные суммы
== Обфускация кода
== Шифрование кода
== Вынесение критических участков кода в отдельные модули
== Защищённые среды выполнения

= Применение методов обратной разработки на практике
== Перехват WiFi трафика
== Исследование бинарного языкового файла
== Дизассемблирование Го-программы
== Дизассемблирование Си-программы
== Декомпиляция Java-программы


= Заключение

= Список использованных источников
+ Reverse engineering: обратная разработка приложений для самых маленьких / Хабр. --- 5 мая 2023. --- URL:  https://habr.com/ru/companies/pentestit/articles/555590/ (дата обращения: 9 декабря 2024)
